#!/usr/bin/env python3
# pylint: disable=E1101,C0115,C0116,C0413,W0613,C0209
# This file is placed in the Public Domain.


"tinder"


## import

import os
import random
import shutil
import sys
import time
import _thread


from op import Command, Event, Handler, Object, Wd
from op import elapsed, launch, locked, parse, scan


from op.run import Cfg, wrap


from opm import cmds, fnd, irc, rss


## define


paylock = _thread.allocate_lock()


Wd.workdir = ".test"
Cfg.debug = True


errors = []
events = []
results = []


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = [
             "cfg",
             "log",
             "rss",
             "log txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]


## class



class CLI(Handler):

    def raw(self, txt):
        if Cfg.verbose:
            cprint(txt)


def cprint(txt):
    print(txt)
    sys.stdout.flush()


def consume(evt):
    fixed = []
    res = []
    for _ev in evt:
        _ev.wait()
        fixed.append(_ev)
    for fff in fixed:
        try:
            evt.remove(fff)
        except ValueError:
            continue
    return res



@locked(paylock)
def payload(clt):
    cmdz = sorted(Command.cmd)
    random.shuffle(cmdz)
    _nr = 0
    for cmd in cmdz:
        for ex in getattr(param, cmd, [""]):
            evt = Event()
            evt.txt = cmd + " " + ex
            evt.orig = repr(clt)
            evt.parse()
            clt.put(evt)
            events.append(evt)
            _nr += 1
    return _nr


## runtime


scan(cmds)
scan(fnd)
scan(irc)
scan(rss)


def main():
    if os.path.exists(Cfg.workdir):
        shutil.rmtree(Cfg.workdir)
    cfg = parse(" ".join(sys.argv[1:]))
    if "v" in cfg.opts:
        Cfg.verbose = True
    cli = CLI()
    cli.start()
    nrs = cfg.index or 20
    thrs = []
    starttime = time.time()
    for _nr in range(nrs):
        thrs.append(launch(payload, cli))
    if thrs:
        res = 0
        for thr in thrs:
            res += thr.join()
    else:
        res = nrs * len(Command.cmd)
    consume(events)
    endtime = time.time()
    print("%s %s %s (%s remaining)" %  (
                                        elapsed(endtime - starttime),
                                        res,
                                        (endtime - starttime)/res, len(events))
                                       )


wrap(main)
